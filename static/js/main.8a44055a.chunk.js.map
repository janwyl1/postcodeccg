{"version":3,"sources":["Tbl.js","FetchData.js","PostcodeToCcg.js","Header.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["TblHead","TblBody","props","data","map","loc","i","result","key","TblRow","query","toUpperCase","ccg","primary_care_trust","nhs_ha","codes","ccg_id","Tbl","className","fetchData","url","a","async","fetch","method","headers","body","JSON","stringify","postcodes","PostcodeInput","placeholder","onChange","e","handleInput","type","onClick","handleGoClick","CcgOutput","outputStr","inputStr","forEach","item","length","copy","reset","PostcodeToCcg","useState","isLoading","setisLoading","isError","setisError","apiData","setapiData","setPostcodes","console","log","preventDefault","target","innerText","document","queryCommandSupported","execCommand","value","split","then","response","status","json","Error","catch","error","Header","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a44055a.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\nconst Tbl = (props) => {\r\n    return (\r\n      <div className=\"tbl-wrapper\">\r\n        <table className=\"u-full-width\">\r\n          <TblHead />\r\n          <TblBody data={props.data}/>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n  const TblHead = () => {\r\n    return (\r\n      <thead>\r\n        <tr>\r\n          <th>Postcode</th>\r\n          <th>CCG</th>\r\n          <th>PCT</th>\r\n          <th>Health Authority</th>\r\n          <th>CCG Code</th>\r\n          <th>CCG ID</th>\r\n        </tr>\r\n      </thead>\r\n    )\r\n  }\r\n  const TblBody = (props) => {\r\n    return (\r\n      <tbody>\r\n        {props.data.map((loc, i) => {\r\n          if (!loc.result) {\r\n            return false;\r\n          }\r\n          return <TblRow loc={loc} key={i}/>\r\n        })}\r\n      </tbody>\r\n    )\r\n  }\r\n  const TblRow = (props) => {\r\n    return (\r\n      <tr>\r\n        <td>{props.loc.query.toUpperCase()}</td>\r\n        <td>{props.loc.result.ccg}</td>\r\n        <td>{props.loc.result.primary_care_trust}</td>\r\n        <td>{props.loc.result.nhs_ha}</td>\r\n        <td>{props.loc.result.codes.ccg}</td>\r\n        <td>{props.loc.result.codes.ccg_id}</td>\r\n      </tr>\r\n    )\r\n  }\r\n  \r\n  export default Tbl;","const fetchData = async (url, data) => {\r\n  return await fetch(url, { \r\n    method: \"POST\", \r\n    headers: {\r\n    'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({postcodes: data})\r\n  })\r\n}\r\n\r\nexport default fetchData","\r\nimport React, {useState} from 'react';\r\nimport Tbl from './Tbl';\r\nimport fetchData from './FetchData'\r\n// import {CopyToClipboard} from 'react-copy-to-clipboard';\r\n\r\nconst PostcodeToCcg = () => {\r\n\r\n  const [isLoading, setisLoading] = useState(0)\r\n  const [isError, setisError] = useState(0)\r\n  const [apiData, setapiData] = useState(0)\r\n  const [postcodes, setPostcodes] = useState([])\r\n  const [copied, setCopied] = useState(false)\r\n\r\n  const handleGoClick = async (e) => {\r\n    e.preventDefault();\r\n    if (postcodes.length < 1) return false; // do nothing if no postcodes entered. Maybe throw an error + display message to user?\r\n    setisLoading(1);\r\n    fetchData('https://api.postcodes.io/postcodes/', postcodes)\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        return response.json();\r\n      } else {\r\n        throw new Error('Something went wrong ...');\r\n      }\r\n    })\r\n    .then(data => {\r\n      setisLoading(0);\r\n      setapiData(data.result)\r\n    })\r\n    .catch(error => {\r\n      setisLoading(0)\r\n      setisError(error)\r\n    });\r\n  }\r\n\r\n  const handleInput = (e) => {\r\n    e.preventDefault();\r\n    let postcodes = e.target.value.split(\",\")\r\n    setPostcodes(postcodes)\r\n  }\r\n\r\n  const clearData = (e) => {\r\n    e.preventDefault();\r\n    setapiData(0);\r\n  }\r\n  const copyToClipboard = (e) => {\r\n    console.log(\"Copy to clipboard:\", e.target.innerText);\r\n    e.preventDefault()\r\n\r\n    console.log(\"supported?: \", document.queryCommandSupported('copy'))\r\n    // Check if copy feature is supported\r\n    if (document.queryCommandSupported('copy')) {\r\n      document.execCommand(\"copy\", null, e.target.innerText)\r\n    }\r\n    return false;   \r\n  };\r\n\r\n  if (isError) {\r\n    console.log(isError);\r\n    return (\r\n      <main>\r\n        <p>There was an error</p>\r\n      </main>\r\n    )\r\n  } else if (isLoading) {\r\n    return (\r\n      <main>\r\n        <p>Loading...</p>\r\n      </main>\r\n    )\r\n  } else if (apiData) {\r\n    return (\r\n      <main>\r\n        <CcgOutput data={apiData} reset={clearData} copy={copyToClipboard}/>\r\n        <Tbl data={apiData} />\r\n      </main>  \r\n    )\r\n  } else {\r\n    return (\r\n      <main>\r\n        <PostcodeInput handleInput={handleInput} handleGoClick={handleGoClick}/>\r\n      </main>      \r\n    )\r\n  }\r\n}\r\n\r\nconst PostcodeInput = (props) => {\r\n  return (\r\n    <div className=\"row postcode-input\">\r\n      <textarea placeholder=\"Enter a comma separated list of postcodes e.g. WA1 1AA, L31 1ED...\" onChange={(e) => {props.handleInput(e)}} className=\"d-block column\"></textarea>\r\n      <button type=\"submit\" onClick={(e) => {props.handleGoClick(e)}} className=\"d-block button button-primary column mx-auto\">Go!</button>\r\n    </div>\r\n  )\r\n} \r\n\r\nconst CcgOutput = (props) => {\r\n  let outputStr = \"\";\r\n  let inputStr = \"\";\r\n  // Construct inputStr and outputStr. Optionally add a comma to separate\r\n  props.data.forEach((item) => {\r\n    if (inputStr.length > 0) {\r\n      inputStr += \", \"\r\n    }\r\n    inputStr += item.query.toUpperCase()\r\n\r\n    if (outputStr.length > 0) {\r\n      outputStr += \", \"\r\n    } \r\n    if (item.result) {\r\n      outputStr += item.result.codes.ccg_id\r\n    } else {\r\n      outputStr += \"N/A\"\r\n    }\r\n  })\r\n  return (\r\n    <div className=\"ccg-output\">\r\n      <div className=\"row\">\r\n        <div className=\"one-half column\">\r\n          <h6>Postcode:</h6>\r\n            <p onClick={(e) => {props.copy(e)}}>{inputStr}</p>          \r\n        </div>\r\n        <div className=\"one-half column\">\r\n          <h6>CCG:</h6>\r\n          <p onClick={(e) => {props.copy(e)}}>{outputStr}</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"twelve columns\">\r\n          <button type=\"submit\" className=\"button button-primary\" onClick={(e) => props.reset(e)}>Reset</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostcodeToCcg","import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <h1>Postcode to CCG</h1>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (  \r\n      <footer>\r\n        <p>Created by James Anwyl. Data provided by Postcodes.io API</p>\r\n      </footer>\r\n    )\r\n  }\r\nexport default Footer","import React from 'react';\n// import logo from './logo.svg';\n\nimport './normalize.css';\nimport './skeleton.css';\nimport './App.css';\nimport PostcodeToCcg from './PostcodeToCcg'\nimport Header from './Header'\nimport Footer from './Footer'\n\nfunction App() {\n  return (\n    <div className=\"App container\"> \n      <div className=\"main-wrapper\">\n        <div className=\"row\">\n          <Header />\n        </div>\n        <div className=\"row\">\n          <PostcodeToCcg />\n        </div>\n      </div>\n      <div className=\"row\">\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}